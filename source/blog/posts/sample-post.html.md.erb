---
title: Making Minesweeper in JavaScript, Part 1 and This Is Just a Really Long Title and Such and I'll Just Keep Going
teaser: This is a sample post.
date: 2015-08-14
published: false
vi: ft=ghmarkdown
---

* Table of Contents
{:toc}

### Standard blog post things

#### Inline formatting

This is a paragraph with some *emphasized* and **bold** text and maybe some
underlined text and even some ~~strikethrough~~ and hey why don't we try a
[link](https://google2.com)? And maybe let's put [everything
***~~together~~***](https://google.com).

### Lists

#### Unordered lists

There are a few reasons why this post is great:

- **It's short.** Is your post short? No, I didn't think so.  
  Hey, here's a line break just for fun.
- **It's got a puppy.** Seriously, scroll down.
  - That puppy is seriously cute.
    - No but really it's cute.
  - Okay back to the main thing now.
- **Profit**. Gotta get that cash, yo.

#### Numbered lists

Here's how you make a sandwich:

1. Get the bread.
1. Get the cheese.
   1. Make sure to get gruyere cheese.
      1. But not like the really bad stuff, the good stuff.
   1. And make sure it's small.
1. Outsource that shit to the robots, they're gonna take us over anyway.

### Media

![Who likes puppies??](https://www.dogtime.com/assets/uploads/2011/03/puppy-development.jpg)

![We can embed SVGs in addition to PNGs and JPGs](http://www1.plurib.us/1shot/2008/eleven_below/eleven_below_single.svg)

<%= embed_yt_video "dQw4w9WgXcQ" %>

### Code

You can always add `inline code` if you want. But you can also make code blocks:

First some Ruby:

``` ruby
require_relative 'notion/authenticator'
require_relative 'notion/client'
require_relative 'notion/requestor'

module NotionCapture
  module Notion
    USER_ID = ENV.fetch('NOTION_USER_ID')
    TOKEN_FILE = NotionCapture::ROOT.join('tmp/.notion-token')

    def self.client
      @client ||= Client.new(Authenticator.new(TOKEN_FILE))
    end
  end
end
```
{:data-no-overflow="true"}

Then some JavaScript. This code block happens to be really long, and its full contents should appear in a modal:

``` jsx
/*
 * Looks for series of groupable blocks and sticks them together so that they
 * can be rendered using a single HTML element later.
 */
function groupBlocksByType(blocks) {
  let workingBlockType;
  let workingBlockGroup = [];
  const blockGroups = [];
  const groupableBlockTypes = Object.keys(groupingBlockComponents);

  blocks.forEach((block, i) => {
    if (
      workingBlockGroup.length > 0 &&
      (!groupableBlockTypes.includes(block.type) ||
        !groupableBlockTypes.includes(blocks[i - 1].type))
    ) {
      blockGroups.push({
        type: workingBlockType,
        blocks: workingBlockGroup,
      });
      workingBlockType = null;
      workingBlockGroup = [];
    }

    if (workingBlockType == null) {
      workingBlockType = block.type;
    }

    workingBlockGroup.push(block);
  });

  blockGroups.push({ type: workingBlockType, blocks: workingBlockGroup });

  return blockGroups;
}

function groupUngroupedBlocksByType(blockGroups) {
  return blockGroups.flatMap((group) => {
    const { type, blocks } = group;

    if (type === "ungrouped") {
      return groupBlocksByType(blocks);
    } else {
      return group;
    }
  });
}

export default function BlogPost({ blogEntry }) {
  const blockGroups = groupUngroupedBlocksByType(
    detectCustomComponentsWithWysiwygContentWithin(blogEntry.blocks)
  );

  return (
    <div className="p-8 font-serif">
      <h2 className="font-semibold text-3xl font-sans text-center mb-8">
        {blogEntry.title}
      </h2>
      {blockGroups.map((group, index) => (
        <GroupingBlock key={index} group={group}>
          {group.blocks.map((block, index) => (
            <Block key={index} block={block} />
          ))}
        </GroupingBlock>
      ))}
    </div>
  );
}
```

Some HTML:

``` html
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>The Chromamatic 5000</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!--<link rel="icon" href="./favicon.png" />-->
    <!--<link rel="stylesheet" href="./index.css" />-->
  </head>
  <body>
    <div id="root"></div>
    <script src="./index.js"></script>
  </body>
</html>
```

### Callouts

This is a note! This note goes on forever. It can't be broken up into
paragraphs, though, or else that's not going to work.
{:.aside.aside--tip}

This is a **warning**! This warning goes on forever. It can't be broken up into
paragraphs, though, or else that's not going to work.
{:.aside.aside--heads-up}

### Rare things

#### Quotes

Here's a quote from some famous dude:

> Know when to hold 'em, know when to fold 'em.
>
> *â€” Billy Ray Cyrus or whatever*

### Custom components

We can put a photo in a post without anything additional, but normally we would
want an image that would be centered and has a max height, like this:

![](https://dogtime.com/assets/uploads/2011/03/puppy-development.jpg)
{:.centered.with-max-height}

![](https://dogtime.com/assets/uploads/2011/03/puppy-development.jpg)
{:.floating-image}

However, we can also have an inline image that floats to the right.

Just putting some more text here so the image will have enough room.

This is a file tree:

<ul class="file-tree">
  <li class="directory">
    <span>foo/</span><ul>
      <li class="directory">
        <span>bar/</span>
        <ul>
          <li class="file">
            <span>baz.png</span>
          </li>
          <li class="directory">
            <span>splash/</span>
            <ul>
              <li class="file">
                <span>sploosh.jpg</span>
              </li>
            </ul>
          </li>
          <li class="file">
            <span>qux.png</span>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li class="directory">
    <span>zing/</span>
    <ul>
      <li class="file">
        <span>zang.svg</span>
      </li>
    </ul>
  </li>
</ul>

And here is an iframe:

<iframe src="https://www.openstreetmap.org/export/embed.html?bbox=-0.004017949104309083%2C51.47612752641776%2C0.00030577182769775396%2C51.478569861898606&layer=mapnik"></iframe>

Here is a pseudocode list:

* Build a `<table>` element
* Assign it an `id` of `board` (so that it retains the styling it has right now)
* Add the `<table>` to the `<body>` element (so that it appears on the screen)
* Build a `<tr>` element
* *... 6 more times ...*
* Build a `<tr>` element
* Add the `<tr>` to the `<table>`
* Build a `<td>` element
* Add the `<td>` element to the `<tr>`
{:.pseudocode}

And something below this for good measure.
